{"version":3,"sources":["utils/AssetProvider.js","utils/colors.js","texts/content.js","texts/titles.js","utils/ScrollView.js","utils/View.js","App.js","assets/fonts/Open_Sans/OpenSans-Regular.ttf","assets/fonts/Open_Sans/OpenSans-Bold.ttf","assets/fonts/Montserrat/Montserrat-Black.ttf","assets/fonts/Montserrat/Montserrat-Bold.ttf","assets/fonts/Montserrat/Montserrat-Light.ttf"],"names":["contentFonts","content","require","bold","title","heading","lightTitle","propDrill","children","prop","React","Children","map","child","isValidElement","cloneElement","AssetProvider","props","setDarkModeState","obj","console","log","onModeChange","this","setState","isDarkMode","Appearance","addChangeListener","colorScheme","tmp","getColorScheme","state","fontsLoaded","a","async","Font","_loadFontsAsync","Component","brandColors","infoColors","lightModeStyle","text","color","quoteText","darkModeStyle","Text","styleMode","fontFamily","italic","fontStyle","sup","fontSize","textAlignVertical","height","textAlign","sub","style","Link","undefined","textDecorationLine","TouchableOpacity","onPress","Linking","openURL","href","margin","padding","justifyContent","alignSelf","Quote","secondStyle","StyleSheet","create","sec","width","paddingHorizontal","alignItems","containerStyle","authorStyle","author","Intern_Title","args","light","lineHeight","Title","Heading","paddingLeft","h6","h5","h4","h3","h2","h1","borderBottomWidth","borderBottomColor","ScrollView","lightModeStyleGuide","container","backgroundColor","darkModeStyleGuide","View","paddingTop","App","styles","flexDirection","PropTypes","object","flex","module","exports"],"mappings":"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","file":"static/js/app.9cdb5c97.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as Font from \"expo-font\";\nimport { Appearance, StatusBar, Text, View } from \"react-native\";\n\nexport const contentFonts = {\n  content: require(\"../assets/fonts/Open_Sans/OpenSans-Regular.ttf\"),\n  bold: require(\"../assets/fonts/Open_Sans/OpenSans-Bold.ttf\"),\n  title: require('../assets/fonts/Montserrat/Montserrat-Black.ttf'),\n  heading: require('../assets/fonts/Montserrat/Montserrat-Bold.ttf'),\n  lightTitle: require('../assets/fonts/Montserrat/Montserrat-Light.ttf')\n};\n\nexport function propDrill(children, prop) {\n  const childrenWithProps = React.Children.map(children, child => {\n    // checking isValidElement is the safe way and avoids a typescript error too\n    if (React.isValidElement(child)) {\n      return React.cloneElement(child, { ...prop });\n    }\n    return child;\n  });\n\n  return childrenWithProps;\n}\n\nexport default class AssetProvider extends Component {\n\n  setDarkModeState = function (obj) {\n    console.log(obj);\n    return obj === \"dark\" ? true : false;\n  };\n  onModeChange = function (obj){\n    this.setState({ isDarkMode: this.setDarkModeState(obj) });\n  }\n\n  constructor(props) {\n    super(props);\n\n    Appearance.addChangeListener((obj) => {this.onModeChange(obj.colorScheme)});\n    let tmp = this.setDarkModeState(Appearance.getColorScheme())\n    this.state = {\n      fontsLoaded: false,\n      isDarkMode: tmp,\n    };\n  }\n\n  async _loadFontsAsync() {\n    await Font.loadAsync(contentFonts);\n    this.setState({fontsLoaded: true});\n    this.setState({...this.state, fontsLoaded:true});\n  }\n\n  componentDidMount() {\n    this._loadFontsAsync();\n  }\n\n  render() {\n    let children = propDrill(this.props.children, {isDarkMode: this.state.isDarkMode})\n    if (this.state.fontsLoaded) {\n      return children;\n    } else {\n      return <Text>Loading</Text>;\n    }\n\n  }\n}\n","\nexport const brandColors = {\n    '100': '#FEECE2',\n    '200': '#FED3C3',\n    '300': '#F9B4A5',\n    '400': '#F5987F',\n    '500': '#EF6968',\n    '600': '#CE4C58',\n    '700': '#AB3448',\n    '800': '#89213C',\n    '900': '#721534',\n}\n\nexport const successColors = {\n    '100': '#FEECE2',\n    '200': '#FED3C3',\n    '300': '#F9B4A5',\n    '400': '#F5987F',\n    '500': '#EF6968',\n    '600': '#CE4C58',\n    '700': '#AB3448',\n    '800': '#89213C',\n    '900': '#721534',\n}\n\nexport const infoColors = {\n    '100': '#FEECE2',\n    '200': '#FED3C3',\n    '300': '#F9B4A5',\n    '400': '#F5987F',\n    '500': '#EF6968',\n    '600': '#CE4C58',\n    '700': '#AB3448',\n    '800': '#89213C',\n    '900': '#721534',\n}\n\nexport const alertColors = {\n    '100': '#FEECE2',\n    '200': '#FED3C3',\n    '300': '#F9B4A5',\n    '400': '#F5987F',\n    '500': '#EF6968',\n    '600': '#CE4C58',\n    '700': '#AB3448',\n    '800': '#89213C',\n    '900': '#721534',\n}\n\nexport const dangerColors = {\n    '100': '#FEECE2',\n    '200': '#FED3C3',\n    '300': '#F9B4A5',\n    '400': '#F5987F',\n    '500': '#EF6968',\n    '600': '#CE4C58',\n    '700': '#AB3448',\n    '800': '#89213C',\n    '900': '#721534',\n}\n","import React, { Component } from \"react\";\nimport {\n  Linking,\n  StyleSheet,\n  Text as RText,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nimport { propDrill } from \"../utils/AssetProvider\";\nimport { brandColors, infoColors } from \"../utils/colors\";\n\nconst lightModeStyle = {\n  text: {\n    color: \"#000000\",\n  },\n  quoteText: {\n    color: brandColors['600']\n  }\n};\n\nconst darkModeStyle = {\n  text: {\n    color: \"#ffffff\",\n  },\n  quoteText: {\n    color: brandColors['400']\n  }\n};\n\nexport class Text extends Component {\n\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let styleMode = {};\n    if (this.props.bold) {\n      styleMode = { fontFamily: \"bold\", color: brandColors[\"500\"] };\n    }\n\n    if (this.props.italic) {\n      styleMode.fontStyle = \"italic\";\n      styleMode.color = brandColors[\"500\"];\n    }\n\n    if (this.props.sup) {\n      styleMode = {\n        ...styleMode,\n        fontSize: 12,\n        textAlignVertical: \"top\",\n        height: \"100%\",\n        textAlign: \"left\",\n      };\n    }\n\n    if (this.props.sub) {\n      styleMode = {\n        ...styleMode,\n        fontSize: 12,\n        textAlignVertical: \"bottom\",\n        height: \"100%\",\n        textAlign: \"left\",\n      };\n    }\n\n    if (this.props.isDarkMode === true) {\n      styleMode = {...darkModeStyle.text,...styleMode};\n    } else {\n      styleMode = {...lightModeStyle.text,...styleMode};\n    }\n    let children = propDrill(this.props.children, {\n      isDarkMode: this.props.isDarkMode,\n    });\n\n    return (\n      <RText style={[styleMode, this.props.style]}>\n        {children}\n      </RText>\n    );\n  }\n}\n\nexport class Link extends Component {\n  constructor(props) {\n    super(props);\n\n    let style = {};\n\n    if (props.style !== undefined) {\n      style = props.style;\n    }\n\n    this.state = {\n      style: {\n        ...style,\n        textDecorationLine: \"underline\",\n        color: infoColors[\"500\"],\n      },\n    };\n  }\n\n  render() {\n    return (\n      <TouchableOpacity\n        onPress={() => Linking.openURL(this.props.href)}\n        style={{ margin: 0, padding:0, justifyContent:'flex-end', alignSelf:'flex-end'}}\n      >\n        <Text style={this.state.style}>{this.props.children}</Text>\n      </TouchableOpacity>\n    );\n  }\n}\n\n/* export class Quote extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let children  = propDrill(this.props.children, {isDarkMode: this.props.isDarkMode});\n    let styleMode = this.props.isDarkMode ? darkModeStyle.text : lightModeStyle.text;\n\n    return (\n      <View style={{flexDirection:'column', justifyContent:'flex-end', alignItems:'flex-end'}}>\n        <Text bold style={[{color: brandColors['500'], fontSize:'130%',fontFamily:'content'}]}>{children}</Text>\n        <Text bold italic style={[ {color: brandColors['600'], fontSize:'115%',fontFamily:'content'}]}>{this.props.author}</Text>\n      </View>\n    );\n  }\n} */\n\nexport class Quote extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let styleMode = this.props.isDarkMode\n      ? darkModeStyle.quoteText\n      : lightModeStyle.quoteText;\n    let children = propDrill(this.props.children, {\n      isDarkMode: this.props.isDarkMode,\n    });\n\n    let secondStyle = StyleSheet.create({\n      sec: { fontSize: 24, fontFamily: \"title\",alignSelf:'center' },\n    });\n    return (\n      <View\n        style={[\n          {\n            width: \"100%\",\n            paddingHorizontal: \"15%\",\n            justifyContent: \"space-around\",\n            alignItems: \"flex-end\",\n          },\n          this.props.containerStyle,\n        ]}\n      >\n        <RText style={[styleMode, secondStyle.sec, this.props.style]}>\n          \"{children}\"\n        </RText>\n        <RText style={[styleMode, this.props.authorStyle]}>\n          {this.props.author}\n        </RText>\n      </View>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  Text as RText, View\n} from \"react-native\";\nimport {brandColors, infoColors, alertColors, dangerColors, successColors} from '../utils/colors';\n\n\n\nclass Intern_Title extends Component {\n   \n      constructor(props) {\n        super(props);\n      }\n    \n      render() {\n        let style = { fontFamily: \"title\", fontSize: 48, color: brandColors['500'], alignSelf: 'center'};\n        \n        if (this.props.args.light) {\n          style = { ...style, fontFamily: \"lightTitle\" };\n        }\n\n        if (this.props.args.sup) {\n          style = {\n            ...style,\n            fontSize: 12,\n            lineHeight: 40,\n            textAlignVertical: \"top\",\n            height: \"100%\",\n            textAlign: \"left\",\n          };\n          console.log(style);\n        }\n    \n        if (this.props.args.sub) {\n          style = {\n            ...style,\n            fontSize: 12,\n            textAlignVertical: \"bottom\",\n            height: \"100%\",\n            textAlign: \"left\",\n          };\n        }    \n        console.log(style);\n        return <RText style={[style, this.props.style]}>{this.props.children}</RText>;\n      }\n}\n\n\nexport class Title extends Component {\n  constructor(props){\n    super(props);\n  }\n\n    render() {\n      let args = {}\n      args.sub = this.props.sub ? true : false;\n      args.sup = this.props.sup ? true : false;\n      args.light = this.props.light ? true : false;\n\n  \n        return (\n                <Intern_Title style={this.props.style} args={args}>{this.props.children}</Intern_Title>\n        )\n    }\n}\n\nexport class Heading extends Component{\n    constructor(props){\n        super(props);\n\n        let style = {\n            color: brandColors['500'],\n\n            fontFamily:'heading',\n            fontSize:36,\n            paddingLeft:16\n        }\n\n        if (props.h6 !== undefined) {\n            style.fontSize = 18\n        }\n\n        if (props.h5 !== undefined) {\n            style.fontSize = 22\n        }\n\n        if (props.h4 !== undefined) {\n            style.fontSize = 24\n        }\n\n        if (props.h3 !== undefined) {\n            style.fontSize = 28\n        }\n\n        if (props.h2 !== undefined) {\n            style.fontSize = 32\n        }\n\n        if (props.h1 !== undefined) {\n            style.fontSize = 36\n        }\n\n        this.state = {style: style}\n    }\n\n    render(){\n        return <View style={{borderBottomWidth:2, borderBottomColor: brandColors['500']}}>\n        <RText style={[this.state.style, this.props.style]}>{this.props.children}</RText>\n        </View>;\n    }\n}\n","import React, { Component } from 'react'\nimport { ScrollView as RSV } from 'react-native'\nimport { propDrill } from './AssetProvider';\n\nexport default class ScrollView extends Component {\n\n    render() {\n        let children = propDrill(this.props.children, {\n            isDarkMode: this.props.isDarkMode,\n          });      \n        return (\n            <RSV>\n            {children}            \n            </RSV>\n        )\n    }\n}\n","\nimport React, { Component } from \"react\";\nimport { StyleSheet, View as OView } from \"react-native\";\n\nimport { propDrill } from \"./AssetProvider\";\nimport { brandColors } from \"./colors\";\nimport PropTypes from 'prop-types';\n\n\nconst lightModeStyleGuide = StyleSheet.create({\n    container: {\n        backgroundColor: brandColors['100']\n    }\n});\n\nconst darkModeStyleGuide = StyleSheet.create({\n    container: {\n        backgroundColor: brandColors['900']\n    }\n});\n\nexport default class View extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n\n  render() {\n    let style = this.props.isDarkMode ? darkModeStyleGuide['container'] : lightModeStyleGuide['container'];\n    let children = propDrill(this.props.children, {isDarkMode: this.props.isDarkMode});\n    return (\n      <OView style={[style, {paddingTop: 30},this.props.style]}>\n        {children}\n      </OView>\n    );\n  }\n}\n\nView.PropTypes = {\n  style: PropTypes.object,\n}\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { SafeAreaView, StyleSheet } from \"react-native\";\nimport { Link, Quote, Text } from \"./texts/content\";\nimport { Heading, Title } from \"./texts/titles\";\nimport AssetProvider from \"./utils/AssetProvider\";\nimport ScrollView from \"./utils/ScrollView\";\nimport View from \"./utils/View\";\n\nexport default function App() {\n  return (\n    <AssetProvider>\n      <View style={styles.container}>\n        <ScrollView>\n          <Title>\n            Stardom UI <Title sup light>by Pablo Gómez</Title>\n          </Title>\n          <Text>\n            Stardom UI is front-end framework which customizes the base React Native For Web components to offer a new set of components easy to use. The following sections will demonstrate the base components defined by their <Text bold>category</Text>.\n          </Text>\n          <Text>\n            If you would like to discover some solutions which integrate Stardom UI, you can visit the main repository on <Link href=\"https://github.com/pgomezponce/stardom-ui\">GitHub</Link>\n          </Text>\n          <Heading h1>Text</Heading>\n\n          <Text>\n            This is is standard text with multiple lines, within the range of 3\n            - 5 lines. This is a hard case where you find the maximum amount of\n            lines.\n          </Text>\n          <View\n            style={{\n              flexDirection: \"row\",\n              paddingHorizontal: \"1%\",\n            }}\n          >\n            <Text>\n              If you want to{\" \"}\n              <Link href=\"https://www.google.es\">link something</Link>, you\n              should make it inline and provide visual details to it.\n            </Text>\n\n            <Text>\n              To use <Text bold>bold</Text> text means to allow a quick reading\n              of a text. Provide enough content in bold to make a quick read.\n            </Text>\n            <Text>\n              A word in an italic style means it is written in another language,{\" \"}\n              <Text italic>¿de acuerdo?</Text>{\" \"}\n            </Text>\n          </View>\n          <Text>\n            Titles must be 1-liners, with space enough to understand its\n            concepts.\n          </Text>\n          <Title>Title</Title>\n\n          <Text>\n            Quotes can be inline inside a standard text (Author, 2020).\n          </Text>\n          <Text>Quotes can be taken apart also if require space.</Text>\n\n          <Quote author=\"Kingdom Hearts 2\">\n            A Scattered dream is like a far-off memory\n          </Quote>\n        </ScrollView>\n      </View>\n    </AssetProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n","module.exports = __webpack_public_path__ + \"./fonts/OpenSans-Regular.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/OpenSans-Bold.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Montserrat-Black.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Montserrat-Bold.ttf\";","module.exports = __webpack_public_path__ + \"./fonts/Montserrat-Light.ttf\";"],"sourceRoot":""}